@page "/"
@using InvestorliftBlazor.Data
@inject WeatherForecastService ForecastService
@inject DatabaseService DbService

<h1>INVESTORLIFT</h1>

@*<p>This component demonstrates fetching data from a service.</p>*@

@if (Houses == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @*<InfiniteScroll ObserverTargetId="observerTarget" ObservableTargetReached="(e) => GetData()">
            <ul>
                @foreach (var house in Houses)
                {
                    <li class="list-group-item">@house.Index: @house.Title - @house.FullAddress (@house.Price)</li>
                }

                The target element that we observe. Once this is reached the callback will be triggered.
                <li class="list-group-item" hidden id="observerTarget"></li>
            </ul>
        </InfiniteScroll>*@
    <div class="mainpage">
        <div class="leftpage">
            <div class="leftpagebg d-flex justify-content-center align-items-center">

            </div>
        </div>
        <div class="rightpage">
            <InfiniteScroll ObserverTargetId="observerTarget" ObservableTargetReached="(e) => GetData()">
                @foreach (var house in Houses)
                {
                    <div class="listitem">
                        <img src="@house.ImageLink" />
                    </div>
                }
                <div class="listitemrow" id="observerTarget"></div>
            </InfiniteScroll>
        </div>
    </div>
}

@*<button @onclick="ReloadData">Reload</button>*@

@code {
    private House house;
    //private WeatherForecast[]? forecasts;
    private List<House> Houses = new List<House>();
    private List<House> HousesTmp = new List<House>();

    private async Task GetData()
    {
        Houses.AddRange(HousesTmp.Skip(Houses.Count).Take(10).ToArray());
    }

    protected override async Task OnInitializedAsync()
    {
        house = new House(DbService);
        //forecasts = await ForecastService.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));


    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            //var timer = new Timer(new TimerCallback(_ =>
            //{
            //    uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
            //}), null, 2000, 2000);

            HousesTmp = await house.GetAll();

            Houses.AddRange(HousesTmp.Take(20).ToArray());

            StateHasChanged();
        }
    }

    //private async void ReloadData()
    //{
    //    Houses = null;

    //    HousesTmp = await house.GetAll();

    //    Houses.AddRange(HousesTmp.Take(20).ToArray());

    //    StateHasChanged();
    //}
}

