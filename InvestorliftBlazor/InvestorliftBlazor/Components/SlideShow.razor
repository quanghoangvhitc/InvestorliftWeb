@inject IJSRuntime JSRuntime

<div class="row slide-show">
    <div class="col-md-12 slide-box">
        @for (int i = 0; i < component.Count; i++)
        {
            <a href="@(component[i].Replace("-th1.", "."))" data-fancybox="gallery">
                <img class="image-slide @cssClass[i].Item1" src="@(component[i].Replace("-th1.", "-th2."))" alt="" />
            </a>
        }

        <a class="image-prev" @onclick="() => PlusSlide(true)">&#10094;</a>
        <a class="image-next" @onclick="() => PlusSlide(false)">&#10095;</a>

        <div class="thumbnail-list">
            <div class="thumbnail-row">
                @for (int i = 0; i < component.Count; i++)
                {
                    int index = i;
                    <div id="image-@index" class="thumbnail-column">
                        <img class="image-thumbnail @cssClass[i].Item2" src="@component[i]" @onclick="() => SetImage(index)" />
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public List<string> component { get; set; } = new List<string>();

    private List<Tuple<string, string>> cssClass { get; set; } = new List<Tuple<string, string>>();
    private int currentPosition;

    protected override async Task OnInitializedAsync()
    {
        if (component != null && component.Count > 0)
        {
            component.ForEach(link =>
            {
                cssClass.Add(new Tuple<string, string>(string.Empty, string.Empty));
            });
            await SetImage(0);
        }
    }

    private async Task SetImage(int position)
    {
        currentPosition = position;
        for (int i = 0; i < component.Count; i++)
        {
            cssClass[i] = i != currentPosition ? new Tuple<string, string>("hide-slide", string.Empty) 
                                               : new Tuple<string, string>("show-slide", "active");
        }
        await InvokeAsync(() => this.StateHasChanged());
    }

    private async Task PlusSlide(bool backwards)
    {
        int position;
        if (backwards)
            position = currentPosition == 0 ? component.Count - 1 : currentPosition - 1;
        else
            position = currentPosition == component.Count - 1 ? 0 : currentPosition + 1;
        await SetImage(position);
        await JSRuntime.InvokeVoidAsync("scrollHorizontal", $"image-{position}");
    }
}
